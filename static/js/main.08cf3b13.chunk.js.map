{"version":3,"sources":["Components/Statistics/Statistics.js","Components/Section/Section.js","Components/FeedbackOptions/FeedbackOptions.js","Components/Notification/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positive","Section","title","children","FeedbackOptions","options","onLeaveFeedback","className","map","el","onClick","Notification","message","App","state","type","setState","prev","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","this","Object","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAuBeA,EApBI,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAC5C,OACI,6BACA,mCAASJ,GACT,sCAAYC,GACZ,kCAAQC,GACR,oCAAUC,GACV,uCAAaC,EAAb,QCUOC,EAhBC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACvB,OACE,6BACE,4BAAKD,GACJC,ICYQC,EAjBS,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBAE/B,OACI,yBAAKC,UAAU,WACVF,EAAQG,KAAI,SAAAC,GAAE,OACX,4BAAQF,UAAU,MAAMG,QAAS,kBAAMJ,EAAgBG,KAAMA,QCE9DE,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OAAO,2BAAIA,IC6DGC,E,4MAzDbC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPQ,gBAAkB,SAACS,GAElB,EAAKC,UAAS,SAACC,GAAD,sBAAcF,EAAOE,EAAKF,GAAQ,O,EAIjDG,mBAAqB,WAEnB,OAAQ,EAAKJ,MAAMlB,KAAO,EAAKkB,MAAMjB,QAAU,EAAKiB,MAAMhB,K,EAG5DqB,gCAAkC,WAChC,OAAQ,EAAKL,MAAMlB,KAAO,EAAKsB,qBAAuB,KAAKE,QAAQ,I,uDAG3D,IAAD,EACwBC,KAAKP,MAA5BlB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBO,EAAUiB,OAAOC,KAAKF,KAAKP,OAC3BR,EAAkBe,KAAKf,gBACvBP,EAAQsB,KAAKH,qBACblB,EAAUqB,KAAKF,kCACrB,OACE,oCACE,kBAAC,EAAD,CAASjB,MAAM,yBACb,kBAAC,EAAD,CACEG,QAASA,EACTC,gBAAiBA,KAIrB,kBAAC,EAAD,CAASJ,MAAM,aAEVH,EAAQ,EACP,kBAAC,EAAD,CACAH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,SAAUA,IAIV,kBAAC,EAAD,CAAcY,QAAS,4B,GAjDnBY,aCDlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.08cf3b13.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst Statistics = ({good, neutral, bad, total, positive}) => {\r\n    return (\r\n        <div>\r\n        <p>Good {good}</p>\r\n        <p>Neutral {neutral}</p>\r\n        <p>Bad {bad}</p>\r\n        <p>Total {total}</p>\r\n        <p>Pisitive {positive} %</p>\r\n        </div>\r\n    );\r\n\r\n    Statistics.propTypes = {\r\n        good: PropTypes.number.isRequired,\r\n        neutral: PropTypes.number.isRequired,\r\n        bad: PropTypes.number.isRequired,\r\n        total: PropTypes.number.isRequired,\r\n        positive: PropTypes.number.isRequired,\r\n    }\r\n};\r\n\r\nexport default Statistics;","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\n\r\nconst Section = ({title, children}) => {\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n\r\n  Section.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n  }\r\n\r\n\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes, { arrayOf } from 'prop-types'\r\n\r\nconst FeedbackOptions = ({options, onLeaveFeedback}) => {\r\n\r\n    return (\r\n        <div className=\"buttons\">\r\n            {options.map(el => (\r\n                <button className=\"btn\" onClick={() => onLeaveFeedback(el)}>{el}</button>\r\n            ))}\r\n\r\n    </div>\r\n    );\r\n\r\n    FeedbackOptions.propTypes = {\r\n        options: PropTypes.arrayOf(PropTypes.string),  \r\n        onLeaveFeedback: PropTypes.func,    \r\n    }\r\n};\r\n\r\nexport default FeedbackOptions;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => {\r\n return <p>{message}</p>;\r\n};\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\n// import Feedbacks from \"./Components/Section/Section\";\nimport Statistics from \"./Components/Statistics/Statistics\";\nimport Section from \"./Components/Section/Section\";\nimport FeedbackOptions from \"./Components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./Components/Notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = (type) => {\n\n   this.setState((prev) => ({ [type]: prev[type] + 1 }));\n\n  };\n\n  countTotalFeedback = () => {\n\n    return (this.state.good + this.state.neutral + this.state.bad);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return (this.state.good / this.countTotalFeedback() * 100).toFixed(2);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n    const onLeaveFeedback = this.onLeaveFeedback;\n    const total = this.countTotalFeedback();\n    const positive =this.countPositiveFeedbackPercentage();\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={onLeaveFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistic\">\n          {\n            (total > 0  ? (\n              <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positive={positive}\n            />\n              \n            ) : (\n              <Notification message={\"No feedback given\"}/>\n            ))\n          }\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}